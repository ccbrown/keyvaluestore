// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: common/rustproto.proto

// see https://github.com/gogo/protobuf/blob/master/gogoproto/gogo.proto
// for the original idea

// Generated files can be customized using this proto
// or using `Customize` struct when codegen is invoked programmatically.

package rustproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var file_common_rustproto_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17001,
		Name:          "rustproto.expose_oneof_all",
		Tag:           "varint,17001,opt,name=expose_oneof_all",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17003,
		Name:          "rustproto.expose_fields_all",
		Tag:           "varint,17003,opt,name=expose_fields_all",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17004,
		Name:          "rustproto.generate_accessors_all",
		Tag:           "varint,17004,opt,name=generate_accessors_all",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17005,
		Name:          "rustproto.generate_getter_all",
		Tag:           "varint,17005,opt,name=generate_getter_all",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17011,
		Name:          "rustproto.carllerche_bytes_for_bytes_all",
		Tag:           "varint,17011,opt,name=carllerche_bytes_for_bytes_all",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17012,
		Name:          "rustproto.carllerche_bytes_for_string_all",
		Tag:           "varint,17012,opt,name=carllerche_bytes_for_string_all",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17030,
		Name:          "rustproto.serde_derive_all",
		Tag:           "varint,17030,opt,name=serde_derive_all",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         17031,
		Name:          "rustproto.serde_derive_cfg_all",
		Tag:           "bytes,17031,opt,name=serde_derive_cfg_all",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17035,
		Name:          "rustproto.lite_runtime_all",
		Tag:           "varint,17035,opt,name=lite_runtime_all",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17001,
		Name:          "rustproto.expose_oneof",
		Tag:           "varint,17001,opt,name=expose_oneof",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17003,
		Name:          "rustproto.expose_fields",
		Tag:           "varint,17003,opt,name=expose_fields",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17004,
		Name:          "rustproto.generate_accessors",
		Tag:           "varint,17004,opt,name=generate_accessors",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17005,
		Name:          "rustproto.generate_getter",
		Tag:           "varint,17005,opt,name=generate_getter",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17011,
		Name:          "rustproto.carllerche_bytes_for_bytes",
		Tag:           "varint,17011,opt,name=carllerche_bytes_for_bytes",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17012,
		Name:          "rustproto.carllerche_bytes_for_string",
		Tag:           "varint,17012,opt,name=carllerche_bytes_for_string",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17030,
		Name:          "rustproto.serde_derive",
		Tag:           "varint,17030,opt,name=serde_derive",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         17031,
		Name:          "rustproto.serde_derive_cfg",
		Tag:           "bytes,17031,opt,name=serde_derive_cfg",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17003,
		Name:          "rustproto.expose_fields_field",
		Tag:           "varint,17003,opt,name=expose_fields_field",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17004,
		Name:          "rustproto.generate_accessors_field",
		Tag:           "varint,17004,opt,name=generate_accessors_field",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17005,
		Name:          "rustproto.generate_getter_field",
		Tag:           "varint,17005,opt,name=generate_getter_field",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17011,
		Name:          "rustproto.carllerche_bytes_for_bytes_field",
		Tag:           "varint,17011,opt,name=carllerche_bytes_for_bytes_field",
		Filename:      "common/rustproto.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         17012,
		Name:          "rustproto.carllerche_bytes_for_string_field",
		Tag:           "varint,17012,opt,name=carllerche_bytes_for_string_field",
		Filename:      "common/rustproto.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// When true, oneof field is generated public
	//
	// optional bool expose_oneof_all = 17001;
	E_ExposeOneofAll = &file_common_rustproto_proto_extTypes[0]
	// When true all fields are public, and not accessors generated
	//
	// optional bool expose_fields_all = 17003;
	E_ExposeFieldsAll = &file_common_rustproto_proto_extTypes[1]
	// When false, `get_`, `set_`, `mut_` etc. accessors are not generated
	//
	// optional bool generate_accessors_all = 17004;
	E_GenerateAccessorsAll = &file_common_rustproto_proto_extTypes[2]
	// When false, `get_` is not generated even if `syntax = "proto2"`
	//
	// optional bool generate_getter_all = 17005;
	E_GenerateGetterAll = &file_common_rustproto_proto_extTypes[3]
	// Use `bytes::Bytes` for `bytes` fields
	//
	// optional bool carllerche_bytes_for_bytes_all = 17011;
	E_CarllercheBytesForBytesAll = &file_common_rustproto_proto_extTypes[4]
	// Use `bytes::Bytes` for `string` fields
	//
	// optional bool carllerche_bytes_for_string_all = 17012;
	E_CarllercheBytesForStringAll = &file_common_rustproto_proto_extTypes[5]
	// Use `serde_derive` to implement `Serialize` and `Deserialize`
	//
	// optional bool serde_derive_all = 17030;
	E_SerdeDeriveAll = &file_common_rustproto_proto_extTypes[6]
	// Guard serde annotations with cfg attr.
	//
	// optional string serde_derive_cfg_all = 17031;
	E_SerdeDeriveCfgAll = &file_common_rustproto_proto_extTypes[7]
	// When true, will only generate codes that works with lite runtime.
	//
	// optional bool lite_runtime_all = 17035;
	E_LiteRuntimeAll = &file_common_rustproto_proto_extTypes[8]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// When true, oneof field is generated public
	//
	// optional bool expose_oneof = 17001;
	E_ExposeOneof = &file_common_rustproto_proto_extTypes[9]
	// When true all fields are public, and not accessors generated
	//
	// optional bool expose_fields = 17003;
	E_ExposeFields = &file_common_rustproto_proto_extTypes[10]
	// When false, `get_`, `set_`, `mut_` etc. accessors are not generated
	//
	// optional bool generate_accessors = 17004;
	E_GenerateAccessors = &file_common_rustproto_proto_extTypes[11]
	// When false, `get_` is not generated even if `syntax = "proto2"`
	//
	// optional bool generate_getter = 17005;
	E_GenerateGetter = &file_common_rustproto_proto_extTypes[12]
	// Use `bytes::Bytes` for `bytes` fields
	//
	// optional bool carllerche_bytes_for_bytes = 17011;
	E_CarllercheBytesForBytes = &file_common_rustproto_proto_extTypes[13]
	// Use `bytes::Bytes` for `string` fields
	//
	// optional bool carllerche_bytes_for_string = 17012;
	E_CarllercheBytesForString = &file_common_rustproto_proto_extTypes[14]
	// Use `serde_derive` to implement `Serialize` and `Deserialize`
	//
	// optional bool serde_derive = 17030;
	E_SerdeDerive = &file_common_rustproto_proto_extTypes[15]
	// Guard serde annotations with cfg attr.
	//
	// optional string serde_derive_cfg = 17031;
	E_SerdeDeriveCfg = &file_common_rustproto_proto_extTypes[16]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// When true all fields are public, and not accessors generated
	//
	// optional bool expose_fields_field = 17003;
	E_ExposeFieldsField = &file_common_rustproto_proto_extTypes[17]
	// When false, `get_`, `set_`, `mut_` etc. accessors are not generated
	//
	// optional bool generate_accessors_field = 17004;
	E_GenerateAccessorsField = &file_common_rustproto_proto_extTypes[18]
	// When false, `get_` is not generated even if `syntax = "proto2"`
	//
	// optional bool generate_getter_field = 17005;
	E_GenerateGetterField = &file_common_rustproto_proto_extTypes[19]
	// Use `bytes::Bytes` for `bytes` fields
	//
	// optional bool carllerche_bytes_for_bytes_field = 17011;
	E_CarllercheBytesForBytesField = &file_common_rustproto_proto_extTypes[20]
	// Use `bytes::Bytes` for `string` fields
	//
	// optional bool carllerche_bytes_for_string_field = 17012;
	E_CarllercheBytesForStringField = &file_common_rustproto_proto_extTypes[21]
)

var File_common_rustproto_proto protoreflect.FileDescriptor

var file_common_rustproto_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x72, 0x75, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x48, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x41, 0x6c, 0x6c, 0x3a,
	0x4a, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xeb, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x41, 0x6c, 0x6c, 0x3a, 0x54, 0x0a, 0x16, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xec, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x41, 0x6c,
	0x6c, 0x3a, 0x4e, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xed, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x3a, 0x62, 0x0a, 0x1e, 0x63, 0x61, 0x72, 0x6c, 0x6c, 0x65, 0x72, 0x63, 0x68, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xf3, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x63, 0x61, 0x72, 0x6c, 0x6c,
	0x65, 0x72, 0x63, 0x68, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x41, 0x6c, 0x6c, 0x3a, 0x64, 0x0a, 0x1f, 0x63, 0x61, 0x72, 0x6c, 0x6c, 0x65, 0x72,
	0x63, 0x68, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf4, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b,
	0x63, 0x61, 0x72, 0x6c, 0x6c, 0x65, 0x72, 0x63, 0x68, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x3a, 0x48, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x12,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x86, 0x85,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x64, 0x65, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x41, 0x6c, 0x6c, 0x3a, 0x4f, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x64, 0x65, 0x5f, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x87, 0x85, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x64, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x43, 0x66, 0x67, 0x41, 0x6c, 0x6c, 0x3a, 0x48, 0x0a, 0x10, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8b, 0x85, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x6c, 0x6c,
	0x3a, 0x44, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xe9, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x3a, 0x46, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xeb, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x50,
	0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xec, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73,
	0x3a, 0x4a, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xed, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a, 0x5e, 0x0a, 0x1a,
	0x63, 0x61, 0x72, 0x6c, 0x6c, 0x65, 0x72, 0x63, 0x68, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf3, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x61, 0x72, 0x6c, 0x6c, 0x65, 0x72, 0x63, 0x68, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x3a, 0x60, 0x0a, 0x1b,
	0x63, 0x61, 0x72, 0x6c, 0x6c, 0x65, 0x72, 0x63, 0x68, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf4, 0x84, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x63, 0x61, 0x72, 0x6c, 0x6c, 0x65, 0x72, 0x63, 0x68, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x44,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x12, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x86, 0x85, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x64, 0x65, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x3a, 0x4b, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x64, 0x65, 0x5f, 0x64, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x87, 0x85, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x64, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x43, 0x66,
	0x67, 0x3a, 0x4f, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xeb, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x3a, 0x59, 0x0a, 0x18, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xec, 0x84,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x53, 0x0a,
	0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xed, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x3a, 0x67, 0x0a, 0x20, 0x63, 0x61, 0x72, 0x6c, 0x6c, 0x65, 0x72, 0x63, 0x68, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf3, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x63,
	0x61, 0x72, 0x6c, 0x6c, 0x65, 0x72, 0x63, 0x68, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x69, 0x0a, 0x21, 0x63,
	0x61, 0x72, 0x6c, 0x6c, 0x65, 0x72, 0x63, 0x68, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xf4, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x63, 0x61, 0x72, 0x6c, 0x6c, 0x65, 0x72,
	0x63, 0x68, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
}

var file_common_rustproto_proto_goTypes = []interface{}{
	(*descriptorpb.FileOptions)(nil),    // 0: google.protobuf.FileOptions
	(*descriptorpb.MessageOptions)(nil), // 1: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),   // 2: google.protobuf.FieldOptions
}
var file_common_rustproto_proto_depIdxs = []int32{
	0,  // 0: rustproto.expose_oneof_all:extendee -> google.protobuf.FileOptions
	0,  // 1: rustproto.expose_fields_all:extendee -> google.protobuf.FileOptions
	0,  // 2: rustproto.generate_accessors_all:extendee -> google.protobuf.FileOptions
	0,  // 3: rustproto.generate_getter_all:extendee -> google.protobuf.FileOptions
	0,  // 4: rustproto.carllerche_bytes_for_bytes_all:extendee -> google.protobuf.FileOptions
	0,  // 5: rustproto.carllerche_bytes_for_string_all:extendee -> google.protobuf.FileOptions
	0,  // 6: rustproto.serde_derive_all:extendee -> google.protobuf.FileOptions
	0,  // 7: rustproto.serde_derive_cfg_all:extendee -> google.protobuf.FileOptions
	0,  // 8: rustproto.lite_runtime_all:extendee -> google.protobuf.FileOptions
	1,  // 9: rustproto.expose_oneof:extendee -> google.protobuf.MessageOptions
	1,  // 10: rustproto.expose_fields:extendee -> google.protobuf.MessageOptions
	1,  // 11: rustproto.generate_accessors:extendee -> google.protobuf.MessageOptions
	1,  // 12: rustproto.generate_getter:extendee -> google.protobuf.MessageOptions
	1,  // 13: rustproto.carllerche_bytes_for_bytes:extendee -> google.protobuf.MessageOptions
	1,  // 14: rustproto.carllerche_bytes_for_string:extendee -> google.protobuf.MessageOptions
	1,  // 15: rustproto.serde_derive:extendee -> google.protobuf.MessageOptions
	1,  // 16: rustproto.serde_derive_cfg:extendee -> google.protobuf.MessageOptions
	2,  // 17: rustproto.expose_fields_field:extendee -> google.protobuf.FieldOptions
	2,  // 18: rustproto.generate_accessors_field:extendee -> google.protobuf.FieldOptions
	2,  // 19: rustproto.generate_getter_field:extendee -> google.protobuf.FieldOptions
	2,  // 20: rustproto.carllerche_bytes_for_bytes_field:extendee -> google.protobuf.FieldOptions
	2,  // 21: rustproto.carllerche_bytes_for_string_field:extendee -> google.protobuf.FieldOptions
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	0,  // [0:22] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_common_rustproto_proto_init() }
func file_common_rustproto_proto_init() {
	if File_common_rustproto_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_rustproto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 22,
			NumServices:   0,
		},
		GoTypes:           file_common_rustproto_proto_goTypes,
		DependencyIndexes: file_common_rustproto_proto_depIdxs,
		ExtensionInfos:    file_common_rustproto_proto_extTypes,
	}.Build()
	File_common_rustproto_proto = out.File
	file_common_rustproto_proto_rawDesc = nil
	file_common_rustproto_proto_goTypes = nil
	file_common_rustproto_proto_depIdxs = nil
}
